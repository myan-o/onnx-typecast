#!/bin/python
import onnx
import argparse

def print_value_info_list(prefix, value_info_list):
    for vi in value_info_list:
        print(prefix + ' \'' + vi.name + '\'')
        print('{')
        prev_is_value = True
        for dim in vi.type.tensor_type.shape.dim:
            if len(dim.dim_param) > 0:
                if not prev_is_value:
                    print('?')
                else:
                    prev_is_value = False
                print('  \'' + dim.dim_param + '\': ', end="")
            else:
                prev_is_value = True
                print(str(dim.dim_value))
                prev_is_value = True
        if not prev_is_value:
            print('?')
        print('}')

def main(model_path, start_layer, end_layer):
    # ONNXモデルを読み込む
    model = onnx.load(model_path)

    # 入出力
    print_value_info_list("Input", model.graph.input)
    print_value_info_list("Output", model.graph.output)

    # デフォルトでend_layerをモデルの総層数に設定
    if end_layer is None:
        end_layer = len(model.graph.node)
    else:
       end_layer+=1

    # モデルの各層を順番に表示
    for i, node in enumerate(model.graph.node):
        if start_layer <= i + 1 <= end_layer:
            print(f"Layer {i+1}:")
            print(f"  Name: {node.name}")
            print(f"  OpType: {node.op_type}")
            print(f"  Inputs: {node.input}")
            print(f"  Outputs: {node.output}")
            print(f"  Const: {node.attribute}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Display the input shapes and layers of an ONNX model.")
    parser.add_argument("model_path", type=str, help="Path to the ONNX model file.")
    parser.add_argument("-s", type=int, default=0, help="The starting layer index (1-based). Defaults to 0 (the first layer).")
    parser.add_argument("-e", type=int, help="The ending layer index (1-based). Defaults to the last layer.")
    args = parser.parse_args()
    main(args.model_path, args.s, args.e)
