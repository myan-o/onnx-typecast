#!/bin/env python
import onnx
import numpy as np
from onnx import numpy_helper, helper, TensorProto, ValueInfoProto
import sys

def get_var(graph, name):
    for var in graph.initializer:
        if var.name == name:
            return var
    for var in graph.input:
        if var.name == name:
            return var
    for var in graph.output:
        if var.name == name:
            return var
    for var in graph.value_info:
        if var.name == name:
            return var
    return None


def get_dim_count(var):
    if var is ValueInfoProto:
        return len(var.type.tensor_type.shape.dim)
    else:
        return len(var.dims)


def append_tensor_dim(tensor, num_dim, dim_size):
    new_shape = list(tensor.shape) + [dim_size] * num_dims
    return tensor.reshape(new_shape)


def set_dim_count(graph, var, num):
    if var is ValueInfoProto:
        shape = var.type.tensor_type.shape.dim
        count = num - len(shape)
        while count > 0:
            shape.append(TensorProto.TensorShapeProto.Dimension(dim_value=dim_size)
            count -= 1
    else:
        tensor = numpy_helper.to_array(var)
        append_tensor_dim(tensor, num - var.dims, dim_size)
        new_var = numpy_helper.from_array(tensor, name=var.name)
        graph.initializer.remove(var)
        graph.initializer.append(new_var)


def align_matmul_inputs(input_model_path, output_model_path):
    model = onnx.load(input_model_path)
    graph = model.graph

    for node in graph.node:
        if node.op_type == 'MatMul':
            a_var = get_var(graph, node.input[0])
            if a_var == None:
                continue
            b_var = get_var(graph, node.input[1])
            if b_var == None:
                continue
            a_dim_count = get_dim_count(a_var)
            b_dim_count = get_dim_count(b_var)
            if a_dim_count > b_dim_count:
                set_dim_count(graph, b_var, a_dim_count)
            elif a_dim_count < b_dim_count:
                set_dim_count(graph, a_var, b_dim_count)

    # Save the updated model
    onnx.save(model, output_model_path)
    print(f'Updated ONNX model saved as {output_model_path}')


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python align_matmul_inputs.py <input_model_path> <output_model_path>")
        sys.exit(1)

    input_model_path = sys.argv[1]
    output_model_path = sys.argv[2]

    align_matmul_inputs(input_model_path, output_model_path)
